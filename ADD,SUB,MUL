//Addition,Subtraction,Multiplication of two polynomials.
#include <stdio.h>
#include<stdlib.h>
struct node
{
    int coeff;
    int expo;
    struct node* next;
}*newnode,*temp,*temp1,*temp2,*temp3;
struct node* head=NULL;
struct node* tail=NULL;
//Creation of polynomial.
struct node* create(struct node* head)
{
    int ch;
    int c,e;
    do
    {
        newnode=(struct node*)malloc(sizeof(struct node));
        printf("Enter the coefficient value to insert in a single linked list:\n");
        scanf("%d",&c);
        printf("Enter the exponentiation value to insert in a single linked list:\n");
        scanf("%d",&e);
        newnode->coeff=c;
        newnode->expo=e;
        newnode->next=NULL;
        if(head==NULL)
        {
            head=newnode;
            tail=newnode;
        }
        else
        {
            tail->next=newnode;
            tail=newnode;
        }
        printf("Enter 1 to continue:\n");
        fflush(stdin);
        scanf("%d",&ch);
    }while(ch==1);
    return head;
}
//Display of polynomial.
void display(struct node* head)
{
    printf("\nThe created polynomial is:\n");
    temp=head;
    while(temp!=NULL)
    {
        printf("+%dx^%d",temp->coeff,temp->expo);
        temp=temp->next;
    }
}
//Addition of polynomials.
void add_polynomial(struct node *head1,struct node *head2)
{
    printf("\nThe addition polynomial is:\n");
    temp1=head1;
    temp2=head2;
    while(temp1&&temp2)
    {
        if(temp1->expo==temp2->expo)
        {
            printf("+%dx^%d",temp1->coeff+temp2->coeff,temp1->expo);
            temp1=temp1->next;
            temp2=temp2->next;
        }
        else if(temp1->expo<temp2->expo)
        {
            printf("%dx^%d",temp2->coeff,temp2->expo);
            temp2=temp2->next;
        }
        else
        {
            printf("%dx^%d",temp1->coeff,temp1->expo);
            temp1=temp1->next;
        }
    }
    if(temp1==NULL)
    {
        while(temp2!=NULL)
        {
            printf("%dx^%d",temp2->coeff,temp2->expo);
            temp2=temp2->next;
        }
    }
    else
    {
        while(temp1!=NULL)
        {
            printf("%dx^%d",temp1->coeff,temp1->expo);
            temp1=temp1->next;
        }
    }
}
//Subtraction of polynomials.
void sub_polynomial(struct node *head1,struct node *head2)
{
    printf("\nThe subtracted polynomial is:\n");
    temp1=head1;
    temp2=head2;
    while(temp1&&temp2)
    {
        if(temp1->expo==temp2->expo)
        {
            printf("+%dx^%d",temp1->coeff-temp2->coeff,temp1->expo);
            temp1=temp1->next;
            temp2=temp2->next;
        }
        else if(temp1->expo<temp2->expo)
        {
            printf("%dx^%d",temp2->coeff,temp2->expo);
            temp2=temp2->next;
        }
        else
        {
            printf("%dx^%d",temp1->coeff,temp1->expo);
            temp1=temp1->next;
        }
    }
    if(temp1==NULL)
    {
        while(temp2!=NULL)
        {
            printf("%dx^%d",temp2->coeff,temp2->expo);
            temp2=temp2->next;
        }
    }
    else
    {
        while(temp1!=NULL)
        {
            printf("%dx^%d",temp1->coeff,temp1->expo);
            temp1=temp1->next;
        }
    }
}
//Multiplication of polynomials.
struct node* Mul_polynomial(struct node *head1,struct node *head2)
{
    struct node *head3=NULL;
    struct node *tail3=NULL;
    temp1=head1;
    while(temp1!=NULL){
         temp2=head2;
        while(temp2!=NULL){
            newnode=(struct node*)malloc(sizeof(struct node));
            newnode->coeff=temp1->coeff*temp2->coeff;
            newnode->expo=temp1->expo+temp2->expo;
            newnode->next=NULL;
            if(head3==NULL)
            {
                head3=newnode;
                tail3=newnode;
             }
             else
             {
                 tail3->next=newnode;
                 tail3=newnode;
                
             }
            temp2=temp2->next;
            
         }
         temp1=temp1->next;
    }
    temp=head3;
    while(temp->next!=NULL)
    {
        temp2=temp->next;
        while(temp2->next!=NULL)
        {
            if(temp->expo==temp2->expo)
            {
                temp->coeff+=temp2->coeff;
                temp->next=temp2->next;
            }
            if(temp->expo==temp2->next->expo)
            {
                temp->coeff+=temp2->next->coeff;
                temp2->next=temp2->next->next;
            }
            else
            {
               temp2=temp2->next;
            }
        }
        temp=temp->next;
    }
    return head3;
}
//Main function.
void main()
{
    struct node *head1=NULL,*head2=NULL,*head3=NULL;
    struct node *a,*b,*c;
    int choice=0;
    while(choice<9)
    {
        printf("\nOperations on Single linked list are:\n");
        printf("1.Creation of 1st polynomial\n");
        printf("2.Creation of 2nd polynomial\n");
        printf("3.Display of 1st polynomial\n");
        printf("4.Display of 2nd polynomial\n");
        printf("5.Add polynomials\n");
        printf("6.Sub polynomials\n");
        printf("7.Mul polynomials\n");
        printf("8.printing of two polynomials after multiplication.\n");
        printf("Others:Exit()\n");
        printf("Enter your choice:\n");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1:
                    printf("\nEnter 1st polynomial:\n");
                    a=create(head1);
                    break;
            case 2:
                    printf("\nEnter 2nd polynomial:\n");
                    b=create(head2);
                    break;
            case 3:
                    printf("\nThe 1st polynomial is:\n");
                    display(a);
                    break;
            case 4:
                    printf("\nThe 2nd polynomial is\n");
                    display(b);
                    break;
            case 5:
                    add_polynomial(a,b);
                    break;
            case 6:
                    sub_polynomial(a,b);
                    break;
            case 7:
                    c=Mul_polynomial(a,b);
                    break;
            case 8:
                    display(c);
                    break;
        }
    }
    
}
