include<stdio.h>
#include<stdlib.h>
struct node
{
        int data;
        struct node* next;
}*newnode,*temp;
struct node* head=NULL;
struct node* tail=NULL;
void Creation()
{
        int ch,value;
        do{
        newnode=(struct node*)malloc(sizeof(struct node));
                printf("enter the value:\n");
                scanf("%d",&value);
                newnode->data=value;
                newnode->next=NULL;
                if(head==NULL)
                {
                        head=newnode;
                        tail=newnode;
                }
                else
                {
                        tail->next=newnode;
                        tail=newnode;
                }
                printf("Press 1 to continue and others to exit\n");
                fflush(stdin);
                scanf("%d",&ch);
        }while(ch==1);
}

void Display()
{
    printf("Required Single linked list is:\n");
        temp=head;
        while(temp!=NULL)
        {
                printf("# %d #",temp->data);
                temp=temp->next;
        }
}
void Insertion_at_beg()
{
    int inserted_value;
    printf("Enter the inserted value to be inserted at beginning position:\n");
    scanf("%d",&inserted_value);
    newnode=(struct node*)malloc(sizeof(struct node));
    if(newnode==NULL)
    {
        printf("Unable to allocate memory.");
    }
    else
    {
        newnode->data=inserted_value;
        newnode->next=head;
        head=newnode;
    }
}
void Insertion_at_end()
{
    int inserted_value;
    printf("Enter the inserted value to be inserted at ending position:\n");
    scanf("%d",&inserted_value);
    newnode=(struct node*)malloc(sizeof(struct node));
    if(newnode==NULL)
    {
        printf("Unable to allocate memory.");
    }
    else
    {
        newnode->data=inserted_value;
        newnode->next=NULL;
        tail->next=newnode;
        tail=newnode;
    }

}
void Insertion_at_pos()
{
    int inserted_value,position;
    temp=head;
    printf("Enter the inserted value to be inserted at specified position:\n");
    scanf("%d",&inserted_value);
    printf("Enter position to be inserted:\n");
    scanf("%d",&position);
    newnode=(struct node*)malloc(sizeof(struct node));
    for(int i=0;i<position-1;i++)
    {
        temp=temp->next;
    }
    newnode->data=inserted_value;
    newnode->next=temp->next;
    temp->next=newnode;
}
void Deletion_at_beg()
{
    temp=head;
    head=head->next;
    temp->next=NULL;
}
void Deletion_at_end()
{
    temp=head;
    while(temp->next!=tail)
    {
        temp=temp->next;
    }
    temp->next=NULL;
    tail=temp;
}
void Deletion_at_pos()
{
    int position;
    printf("Enter position of an element to be deleted:\n");
    scanf("%d",&position);
    temp=head;
    for(int i=0;i<position-1;i++)
    {
        temp=temp->next;
    }
    temp->next=temp->next->next;
}
void Count()
{
    int count=0;
        temp=head;
        while(temp!=NULL)
        {
                count++;
                temp=temp->next;
        }
    printf("Number of nodes present in a given single linked list is:%d\n",count);
}
int main()
{
        int choice=0;
        while(choice<10)
        {
            printf("# Operations on Single linked list are:\n");
            printf("1.Creation\n");
            printf("2.Display\n");
            printf("3.Insertion at beginning\n");
            printf("4.Insertion at ending\n");
            printf("5.Insertion at specified position\n");
            printf("6.Deletion at beginning\n");
            printf("7.Deletion at ending\n");
            printf("8.Deletion at specified position\n");
            printf("9.To count the number of elements in SLL:\n");
            printf("Others:Exit()\n");
            printf("Enter your choice:\n");
            scanf("%d",&choice);
            switch(choice)
            {
                case 1:
                        Creation();
                        break;
                case 2:
                        Display();
                        break;
                case 3:
                        Insertion_at_beg();
                        break;
                case 4:
                        Insertion_at_end();
                        break;
                case 5:
                        Insertion_at_pos();
                        break;
                case 6:
                        Deletion_at_beg();
                        break;
                case 7:
                        Deletion_at_end();
                        break;
                case 8:
                        Deletion_at_pos();
                        break;
                case 9:
                        Count();
                        break;
            }
        }
}


