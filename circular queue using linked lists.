//Opeartions on circular queue using linked lists.

#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node *next;
}*newnode,*temp;


struct node *front=NULL;
struct node *rear=NULL;

//Enqueue operation.
void enqueue()
{
    int value;
    newnode=(struct node*)malloc(sizeof(struct node));
    printf("enter the value to insert:\n");
    scanf("%d",&value);
    newnode->data=value;
    newnode->next=NULL;
    if((rear==NULL)&&(front==NULL))
    {
        front=newnode;
        rear=newnode;
        rear->next=front;
    }
    else
    {
        rear->next=newnode;
        rear=newnode;
        newnode->next=front;
    }
}


//Dequeue operation.
void dequeue()
{
    temp=front;
    if((rear==NULL)&&(front==NULL))
    {
        printf("\nQueue is empty.\n");
    }
    else if(front==rear)
    {
        front=NULL;
        rear=NULL;
        free(temp);
    }
    else
    {
        front=front->next;
        rear->next=front;
        free(temp);
    }
}

//Display operation.
void display()
{
    temp=front;
    if((front==NULL)&&(rear==NULL))
    {
        printf("\nQueue is empty.\n");
    }
    else
    {
        printf("The elements in the queue are:\n");
        do{
            printf("# %d #",temp->data);
            temp=temp->next;
        }while(temp!=front);
    }
}


void main()
{
    int choice=0;
    while(choice<4)
    {
        printf("\nOperations on Circular queues using linked list.\n");
        printf("1.Enqueue().\n");
        printf("2.Dequeue().\n");
        printf("3.Display().\n");
        printf("Others:Toexit().\n");
        printf("enter u r choice:\n");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1:
                    enqueue();
                    break;
            case 2:
                    dequeue();
                    break;
            case 3:
                    display();
                    break;
        }
    }
}



